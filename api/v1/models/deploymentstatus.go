// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Deploymentstatus deploymentstatus
// swagger:model deploymentstatus
type Deploymentstatus struct {

	// phase
	// Enum: [unknown success failure progress]
	Phase string `json:"phase,omitempty"`
}

// Validate validates this deploymentstatus
func (m *Deploymentstatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePhase(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var deploymentstatusTypePhasePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["unknown","success","failure","progress"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deploymentstatusTypePhasePropEnum = append(deploymentstatusTypePhasePropEnum, v)
	}
}

const (

	// DeploymentstatusPhaseUnknown captures enum value "unknown"
	DeploymentstatusPhaseUnknown string = "unknown"

	// DeploymentstatusPhaseSuccess captures enum value "success"
	DeploymentstatusPhaseSuccess string = "success"

	// DeploymentstatusPhaseFailure captures enum value "failure"
	DeploymentstatusPhaseFailure string = "failure"

	// DeploymentstatusPhaseProgress captures enum value "progress"
	DeploymentstatusPhaseProgress string = "progress"
)

// prop value enum
func (m *Deploymentstatus) validatePhaseEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, deploymentstatusTypePhasePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Deploymentstatus) validatePhase(formats strfmt.Registry) error {

	if swag.IsZero(m.Phase) { // not required
		return nil
	}

	// value enum
	if err := m.validatePhaseEnum("phase", "body", m.Phase); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Deploymentstatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Deploymentstatus) UnmarshalBinary(b []byte) error {
	var res Deploymentstatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
