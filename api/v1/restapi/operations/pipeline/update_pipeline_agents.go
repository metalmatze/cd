// Code generated by go-swagger; DO NOT EDIT.

package pipeline

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"
)

// UpdatePipelineAgentsHandlerFunc turns a function with the right signature into a update pipeline agents handler
type UpdatePipelineAgentsHandlerFunc func(UpdatePipelineAgentsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdatePipelineAgentsHandlerFunc) Handle(params UpdatePipelineAgentsParams) middleware.Responder {
	return fn(params)
}

// UpdatePipelineAgentsHandler interface for that can handle valid update pipeline agents params
type UpdatePipelineAgentsHandler interface {
	Handle(UpdatePipelineAgentsParams) middleware.Responder
}

// NewUpdatePipelineAgents creates a new http.Handler for the update pipeline agents operation
func NewUpdatePipelineAgents(ctx *middleware.Context, handler UpdatePipelineAgentsHandler) *UpdatePipelineAgents {
	return &UpdatePipelineAgents{Context: ctx, Handler: handler}
}

/*UpdatePipelineAgents swagger:route POST /pipelines/status pipeline updatePipelineAgents

updates the status of a running agent

*/
type UpdatePipelineAgents struct {
	Context *middleware.Context
	Handler UpdatePipelineAgentsHandler
}

func (o *UpdatePipelineAgents) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUpdatePipelineAgentsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// UpdatePipelineAgentsBody update pipeline agents body
// swagger:model UpdatePipelineAgentsBody
type UpdatePipelineAgentsBody struct {

	// agent
	// Required: true
	// Format: uuid
	Agent *strfmt.UUID `json:"agent"`

	// healthy
	// Required: true
	Healthy *bool `json:"healthy"`
}

// Validate validates this update pipeline agents body
func (o *UpdatePipelineAgentsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAgent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateHealthy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdatePipelineAgentsBody) validateAgent(formats strfmt.Registry) error {

	if err := validate.Required("options"+"."+"agent", "body", o.Agent); err != nil {
		return err
	}

	if err := validate.FormatOf("options"+"."+"agent", "body", "uuid", o.Agent.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *UpdatePipelineAgentsBody) validateHealthy(formats strfmt.Registry) error {

	if err := validate.Required("options"+"."+"healthy", "body", o.Healthy); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePipelineAgentsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePipelineAgentsBody) UnmarshalBinary(b []byte) error {
	var res UpdatePipelineAgentsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
