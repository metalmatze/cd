/**
 * SignalCD
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Pipeline from '../model/Pipeline';

/**
* Pipeline service.
* @module api/PipelineApi
* @version 0.0.0
*/
export default class PipelineApi {

    /**
    * Constructs a new PipelineApi. 
    * @alias module:api/PipelineApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Get Pipeline by its ID
     * @param {String} id Pipeline ID (UUID)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Pipeline} and HTTP response
     */
    getPipelineWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPipeline");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Pipeline;
      return this.apiClient.callApi(
        '/pipelines/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Pipeline by its ID
     * @param {String} id Pipeline ID (UUID)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Pipeline}
     */
    getPipeline(id) {
      return this.getPipelineWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List of Pipelines.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Pipeline>} and HTTP response
     */
    listPipelinesWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Pipeline];
      return this.apiClient.callApi(
        '/pipelines', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List of Pipelines.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Pipeline>}
     */
    listPipelines() {
      return this.listPipelinesWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
